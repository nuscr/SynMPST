global Borked(role C, role S) {
  par {
    fin {
      D from S to C;
      fin {
        A() from C to S;
        AA from S to C;
      }
    }
    C from S to C;
  } and {
    choice {
      XXX from C to S;
    } or {
      YYY from C to S;
    }
  }
}


(*

Note: this example produces a split state machine, in this one machine has the start, and the other has the end.

In this case, when we merge, both the start and the end are mapped to the single machine.

(Because all states that are not marked and end but have not outgoing arrows are bisimilar to end)

The separated machine is minimised into the resulting one. So we get one machine as a result.

This may be related to issue #4

*)
